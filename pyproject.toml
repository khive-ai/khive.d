[project]
name = "khive"
version = "0.4.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "aiofiles>=22.1.0",
    "fastmcp>=2.10.0",
    "lionagi[graph,postgres,rich,sqlite]>=0.15.8",
    "nest-asyncio>=1.5.0",
    "openai>=1.100.0",
    "plotly>=6.0.0",
    "pyyaml>=6.0.2",
    "streamlit>=1.48.1",
    "tenacity>=9.1.2",
    "websockets>=15.0.1",
]

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Default test execution (no coverage by default for faster development)
addopts = [
    "-v",                          # Verbose output
    "--tb=short",                  # Short traceback format
    "--strict-markers",            # Ensure all markers are defined
    "--strict-config",             # Ensure config is valid
    "--durations=10",              # Show 10 slowest tests
    "--maxfail=5",                 # Stop after 5 failures
    "--disable-warnings",          # Reduce noise during development
    "--no-cov",                    # Disable coverage by default for speed
]

# Async support
asyncio_mode = "auto"

# Test markers for organized test execution
markers = [
    "unit: Fast unit tests (<1s each)",
    "integration: Integration tests with dependencies",
    "e2e: End-to-end tests", 
    "slow: Slow-running tests (>5s)",
    "cli: Command-line interface tests",
    "service: Service layer tests",
    "orchestration: Orchestration workflow tests",
    "performance: Performance benchmark tests",
    "benchmark: Pytest-benchmark performance tests",
    "database: Database performance tests",
    "memory: Memory usage and leak detection tests",
    "concurrency: Multi-agent concurrency tests",
    "scalability: Agent scaling performance tests",
    "regression: Performance regression detection tests",
    "baseline: Baseline establishment tests",
    "security: Security validation tests",
    "api: API endpoint tests",
    "mock: Tests using extensive mocking",
    "fixtures: Tests validating fixture behavior",
    "timeout: Tests with timeout requirements",
]

# Test environment variables
env = [
    "KHIVE_TEST_MODE=true",
    "PYTEST_CURRENT_TEST=true",
]

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:streamlit.*",
]

[tool.coverage.run]
# Coverage configuration
source = ["src/khive"]
omit = [
    "tests/*",
    "*.py[co]",
    "*/__pycache__/*",
    "src/khive/prompts/*",
    "src/khive/cli/commands/*",  # Import-only files
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
]
branch = true
parallel = true
data_file = ".coverage"

[tool.coverage.report]
# Reporting configuration with quality thresholds
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__", 
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
sort = "Cover"
precision = 2
# Quality gates
fail_under = 80.0

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "black[jupyter]>=25.1.0",
    "ruff>=0.12.9",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.0",
    "pytest-env>=1.1.5",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.1",
    "pytest-randomly>=3.15.0",
    "pytest-clarity>=1.0.1",
    "pytest-html>=4.1.1",
    "memory-profiler>=0.61.0",
    "isort>=6.0.1",
    "ipykernel>=6.30.1",
    "ipywidgets>=8.1.7",
    "mypy>=1.11.0",
    "bandit>=1.7.10",
    "coverage>=7.6.0",
    "locust>=2.32.3",
]


[tool.hatch.build.targets.wheel]
packages = ["src/khive"]

[project.scripts]                # PEP 621 console-scripts table
khive         = "khive.cli.khive_cli:main"
