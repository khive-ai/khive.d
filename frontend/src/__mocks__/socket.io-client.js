// Mock implementation of socket.io-client for testing\n\nclass MockSocket {\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = options;\n    this.connected = false;\n    this.events = new Map();\n    this.emittedEvents = [];\n    \n    // Simulate async connection\n    setTimeout(() => {\n      this.connected = true;\n      this.emit('connect');\n    }, 0);\n  }\n  \n  connect() {\n    this.connected = true;\n    this.emit('connect');\n    return this;\n  }\n  \n  disconnect() {\n    this.connected = false;\n    this.emit('disconnect', 'client disconnect');\n    return this;\n  }\n  \n  emit(event, ...args) {\n    this.emittedEvents.push({ event, args });\n    \n    // Trigger event handlers\n    const handlers = this.events.get(event) || [];\n    handlers.forEach(handler => {\n      try {\n        handler(...args);\n      } catch (error) {\n        console.error('Mock socket event handler error:', error);\n      }\n    });\n    \n    return this;\n  }\n  \n  on(event, handler) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event).push(handler);\n    return this;\n  }\n  \n  off(event, handler) {\n    const handlers = this.events.get(event) || [];\n    const index = handlers.indexOf(handler);\n    if (index > -1) {\n      handlers.splice(index, 1);\n    }\n    return this;\n  }\n  \n  removeAllListeners(event) {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n    return this;\n  }\n  \n  // Test utilities\n  _getEmittedEvents() {\n    return this.emittedEvents;\n  }\n  \n  _clearEmittedEvents() {\n    this.emittedEvents = [];\n  }\n  \n  _simulateEvent(event, ...args) {\n    const handlers = this.events.get(event) || [];\n    handlers.forEach(handler => handler(...args));\n  }\n  \n  _simulateError(error) {\n    this._simulateEvent('error', error);\n  }\n  \n  _simulateReconnect() {\n    this._simulateEvent('disconnect', 'transport close');\n    setTimeout(() => {\n      this.connected = true;\n      this._simulateEvent('connect');\n      this._simulateEvent('reconnect', 1);\n    }, 100);\n  }\n}\n\n// Mock the io function\nconst io = jest.fn((url, options) => {\n  return new MockSocket(url, options);\n});\n\n// Export the mock\nmodule.exports = {\n  io,\n  Socket: MockSocket,\n};\n\n// For ES6 imports\nmodule.exports.default = { io, Socket: MockSocket };