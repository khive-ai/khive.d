{
  "report_metadata": {
    "report_name": "khive_demo_performance",
    "generated_at": "2025-08-23T03:34:12.481499",
    "analysis_period_days": 1,
    "benchmarks_analyzed": [
      "file_processing",
      "database_query",
      "cache_operations",
      "api_calls"
    ],
    "total_benchmarks": 4,
    "total_results_analyzed": 8,
    "report_version": "1.0",
    "generator": "Khive Performance Monitoring System"
  },
  "executive_summary": {
    "overall_health": "GOOD",
    "key_metrics": {
      "avg_response_time_ms": 61.24988409797622,
      "system_reliability": 97.0,
      "avg_memory_usage_mb": 68.17190507947346,
      "total_operations": 2265
    },
    "performance_trends": {
      "improving": 0,
      "stable": 4,
      "degrading": 0
    },
    "critical_issues": [],
    "top_recommendations": []
  },
  "performance_analysis": {
    "benchmark_performance": {
      "file_processing": {
        "total_runs": 2,
        "avg_duration_ms": 44.96959810487862,
        "p95_duration_ms": 76.81441186915829,
        "p99_duration_ms": 76.81441186915829,
        "min_duration_ms": 13.124784340598948,
        "max_duration_ms": 76.81441186915829,
        "variance": 0.0020281843273633115,
        "coefficient_of_variation": 1.0014625305669336
      },
      "database_query": {
        "total_runs": 2,
        "avg_duration_ms": 74.86930130681482,
        "p95_duration_ms": 126.31110939238194,
        "p99_duration_ms": 126.31110939238194,
        "min_duration_ms": 23.427493221247694,
        "max_duration_ms": 126.31110939238194,
        "variance": 0.005292519238224638,
        "coefficient_of_variation": 0.9716893492764713
      },
      "cache_operations": {
        "total_runs": 2,
        "avg_duration_ms": 5.971542707537161,
        "p95_duration_ms": 7.197242025559952,
        "p99_duration_ms": 7.197242025559952,
        "min_duration_ms": 4.745843389514371,
        "max_duration_ms": 7.197242025559952,
        "variance": 3.004677636403066e-06,
        "coefficient_of_variation": 0.2902768486862566
      },
      "api_calls": {
        "total_runs": 2,
        "avg_duration_ms": 119.18909427267428,
        "p95_duration_ms": 221.1226281930521,
        "p99_duration_ms": 221.1226281930521,
        "min_duration_ms": 17.255560352296474,
        "max_duration_ms": 221.1226281930521,
        "variance": 0.020780890674993627,
        "coefficient_of_variation": 1.209471277640759
      }
    },
    "system_resource_usage": {
      "memory_usage": {
        "avg_peak_mb": 68.17190507947346,
        "max_peak_mb": 74.57517821069985,
        "p95_peak_mb": 74.57517821069985
      },
      "cpu_usage": {
        "avg_peak_percent": 67.44280658777286,
        "max_peak_percent": 81.59784569550861,
        "p95_peak_percent": 81.59784569550861
      },
      "io_usage": {
        "avg_total_bytes": 0,
        "max_total_bytes": 0,
        "total_io_operations": 0
      }
    },
    "performance_distribution": {}
  },
  "trend_analysis": {
    "trend_summary": {
      "improving_benchmarks": [],
      "stable_benchmarks": [],
      "degrading_benchmarks": [],
      "insufficient_data": [
        "file_processing",
        "database_query",
        "cache_operations",
        "api_calls"
      ]
    },
    "detailed_trends": {
      "file_processing": {
        "direction": "insufficient_data",
        "confidence": 0.0,
        "correlation": 0.0,
        "recent_vs_historical_change": 0.0,
        "sample_size": 0
      },
      "database_query": {
        "direction": "insufficient_data",
        "confidence": 0.0,
        "correlation": 0.0,
        "recent_vs_historical_change": 0.0,
        "sample_size": 0
      },
      "cache_operations": {
        "direction": "insufficient_data",
        "confidence": 0.0,
        "correlation": 0.0,
        "recent_vs_historical_change": 0.0,
        "sample_size": 0
      },
      "api_calls": {
        "direction": "insufficient_data",
        "confidence": 0.0,
        "correlation": 0.0,
        "recent_vs_historical_change": 0.0,
        "sample_size": 0
      }
    }
  },
  "regression_analysis": {
    "regressions_detected": [],
    "regression_summary": {
      "critical": 0,
      "moderate": 0,
      "minor": 0
    }
  },
  "bottleneck_analysis": {
    "bottlenecks_detected": [
      {
        "benchmark_name": "file_processing",
        "bottleneck_type": "cpu",
        "severity": "low",
        "confidence": 1.0,
        "performance_impact": 15.0,
        "current_utilization": 81.59784569550861,
        "recommendation": "Moderate CPU usage detected. Monitor for trends and consider preventive optimizations.",
        "optimization_suggestions": [
          "Consider optimizing CPU-intensive algorithms",
          "Review concurrent execution patterns",
          "Profile code for hot spots",
          "Consider using async/await for I/O operations"
        ]
      },
      {
        "benchmark_name": "cache_operations",
        "bottleneck_type": "cpu",
        "severity": "low",
        "confidence": 1.0,
        "performance_impact": 15.0,
        "current_utilization": 80.11632158156563,
        "recommendation": "Moderate CPU usage detected. Monitor for trends and consider preventive optimizations.",
        "optimization_suggestions": [
          "Consider optimizing CPU-intensive algorithms",
          "Review concurrent execution patterns",
          "Profile code for hot spots",
          "Consider using async/await for I/O operations"
        ]
      }
    ],
    "bottleneck_summary": {
      "cpu": 2,
      "memory": 0,
      "io": 0,
      "network": 0
    },
    "severity_summary": {
      "critical": 0,
      "high": 0,
      "medium": 0,
      "low": 2
    }
  },
  "system_health": {
    "overall_status": "HEALTHY",
    "health_score": 100.0,
    "issues": [],
    "recommendations": []
  },
  "optimization_recommendations": {
    "plan_summary": "Optimization plan with 4 recommendations for 4 benchmarks. Total estimated improvement: 58.0%. Estimated effort: 28.0 hours.",
    "total_estimated_improvement": 58.0,
    "total_estimated_effort_hours": 28.0,
    "recommendations_by_priority": {
      "critical": [],
      "high": [],
      "medium": [
        {
          "id": "pattern_opt_high_variance_20250823_033412",
          "title": "Reduce performance variance",
          "description": "Performance shows high variance, indicating inconsistent execution times and potential reliability issues.",
          "optimization_type": "algorithm",
          "priority": "medium",
          "estimated_improvement_percent": 25,
          "confidence": 0.7,
          "implementation_complexity": "medium",
          "estimated_effort_hours": 8.0,
          "evidence": [
            "Performance variance: 1.26 (coefficient of variation)"
          ],
          "related_benchmarks": [
            "file_processing",
            "database_query",
            "cache_operations",
            "api_calls"
          ],
          "related_operations": [],
          "action_items": [
            "Investigate sources of performance variability",
            "Implement consistent resource allocation",
            "Add performance stabilization mechanisms",
            "Review concurrent operations for race conditions"
          ],
          "code_examples": [],
          "configuration_changes": {},
          "success_metrics": [
            "success_rate",
            "duration",
            "memory_delta_mb"
          ],
          "monitoring_duration_days": 7,
          "metadata": {
            "pattern_data": {
              "detected": true,
              "impact": 25,
              "evidence": "Performance variance: 1.26 (coefficient of variation)"
            }
          }
        },
        {
          "id": "general_caching_20250823_033412",
          "title": "Implement performance caching strategy",
          "description": "High operation volume detected. Implement caching to reduce redundant computations and I/O.",
          "optimization_type": "caching",
          "priority": "medium",
          "estimated_improvement_percent": 15.0,
          "confidence": 0.6,
          "implementation_complexity": "medium",
          "estimated_effort_hours": 12.0,
          "evidence": [
            "Total operations analyzed: 2265"
          ],
          "related_benchmarks": [
            "file_processing",
            "database_query",
            "cache_operations",
            "api_calls"
          ],
          "related_operations": [],
          "action_items": [
            "Identify frequently accessed data for caching",
            "Implement Redis or in-memory caching layer",
            "Add cache invalidation strategy",
            "Monitor cache hit/miss ratios"
          ],
          "code_examples": [
            "\n# Example: Simple LRU cache implementation\nfrom functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef expensive_operation(key):\n    # Expensive computation here\n    return compute_result(key)\n                        "
          ],
          "configuration_changes": {},
          "success_metrics": [
            "duration",
            "throughput_ops_per_sec"
          ],
          "monitoring_duration_days": 7,
          "metadata": {}
        }
      ],
      "low": [
        {
          "id": "cpu_opt_file_processing_20250823_033412",
          "title": "Optimize CPU usage for file_processing",
          "description": "CPU utilization is at 81.6% with 15.0% performance impact. Optimize computational efficiency.",
          "optimization_type": "cpu",
          "priority": "low",
          "estimated_improvement_percent": 9.0,
          "confidence": 1.0,
          "implementation_complexity": "medium",
          "estimated_effort_hours": 4.0,
          "evidence": [
            "CPU utilization: 81.6%",
            "Performance impact: 15.0%",
            "Affected operations: large"
          ],
          "related_benchmarks": [
            "file_processing"
          ],
          "related_operations": [
            "large"
          ],
          "action_items": [
            "Profile code to identify CPU hotspots",
            "Optimize algorithm complexity where possible",
            "Consider parallel processing for CPU-intensive tasks",
            "Review synchronous operations that could be async"
          ],
          "code_examples": [
            "\n# Consider converting synchronous operations to async\nasync def optimized_operation():\n    # Use async operations for I/O\n    async with aiofiles.open('file.txt', 'r') as f:\n        data = await f.read()\n    \n    # Use asyncio.gather for concurrent operations\n    results = await asyncio.gather(*[\n        async_task(item) for item in data_items\n    ])\n    \n    return results\n            ",
            "\n# Use list comprehension instead of loops where possible\n# Slow\nresults = []\nfor item in items:\n    if condition(item):\n        results.append(process(item))\n\n# Faster\nresults = [process(item) for item in items if condition(item)]\n            "
          ],
          "configuration_changes": {},
          "success_metrics": [
            "cpu_percent_peak",
            "duration",
            "throughput_ops_per_sec"
          ],
          "monitoring_duration_days": 7,
          "metadata": {
            "bottleneck_analysis": {
              "avg_cpu_percent": 69.70851830856945,
              "max_cpu_percent": 81.59784569550861,
              "samples_above_threshold": 1,
              "total_samples": 2
            }
          }
        },
        {
          "id": "cpu_opt_cache_operations_20250823_033412",
          "title": "Optimize CPU usage for cache_operations",
          "description": "CPU utilization is at 80.1% with 15.0% performance impact. Optimize computational efficiency.",
          "optimization_type": "cpu",
          "priority": "low",
          "estimated_improvement_percent": 9.0,
          "confidence": 1.0,
          "implementation_complexity": "medium",
          "estimated_effort_hours": 4.0,
          "evidence": [
            "CPU utilization: 80.1%",
            "Performance impact: 15.0%",
            "Affected operations: write"
          ],
          "related_benchmarks": [
            "cache_operations"
          ],
          "related_operations": [
            "write"
          ],
          "action_items": [
            "Profile code to identify CPU hotspots",
            "Optimize algorithm complexity where possible",
            "Consider parallel processing for CPU-intensive tasks",
            "Review synchronous operations that could be async"
          ],
          "code_examples": [
            "\n# Consider converting synchronous operations to async\nasync def optimized_operation():\n    # Use async operations for I/O\n    async with aiofiles.open('file.txt', 'r') as f:\n        data = await f.read()\n    \n    # Use asyncio.gather for concurrent operations\n    results = await asyncio.gather(*[\n        async_task(item) for item in data_items\n    ])\n    \n    return results\n            ",
            "\n# Use list comprehension instead of loops where possible\n# Slow\nresults = []\nfor item in items:\n    if condition(item):\n        results.append(process(item))\n\n# Faster\nresults = [process(item) for item in items if condition(item)]\n            "
          ],
          "configuration_changes": {},
          "success_metrics": [
            "cpu_percent_peak",
            "duration",
            "throughput_ops_per_sec"
          ],
          "monitoring_duration_days": 7,
          "metadata": {
            "bottleneck_analysis": {
              "avg_cpu_percent": 76.56335866961575,
              "max_cpu_percent": 80.11632158156563,
              "samples_above_threshold": 1,
              "total_samples": 2
            }
          }
        }
      ]
    },
    "recommended_implementation_order": [
      "pattern_opt_high_variance_20250823_033412",
      "general_caching_20250823_033412",
      "cpu_opt_file_processing_20250823_033412",
      "cpu_opt_cache_operations_20250823_033412"
    ]
  }
}