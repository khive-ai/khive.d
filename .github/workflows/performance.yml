name: Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv sync
        
    - name: Run performance benchmarks
      run: |
        python scripts/performance/run_performance_tests.py --ci
        
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.run_id }}
        path: |
          performance_results/
          .khive/performance/reports/
        retention-days: 30
        
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const glob = require('@actions/glob');
          
          // Find latest CI report
          const globber = await glob.create('performance_results/ci_report_*.json');
          const files = await globber.glob();
          
          if (files.length > 0) {
            const reportFile = files.sort().pop(); // Get latest
            const report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
            
            const status = report.status;
            const regressions = report.regressions || [];
            const bottlenecks = report.bottlenecks || [];
            
            let comment = `## üîç Performance Test Results\n\n`;
            comment += `**Status:** ${status === 'PASS' ? '‚úÖ PASS' : '‚ùå FAIL'}\n\n`;
            
            if (regressions.length > 0) {
              comment += `### ‚ö†Ô∏è Performance Regressions (${regressions.length})\n`;
              regressions.slice(0, 5).forEach(reg => {
                comment += `- **${reg.benchmark_name}.${reg.operation_type}**: ${reg.relative_change.toFixed(2)}x slower (${reg.severity})\n`;
              });
              comment += '\n';
            }
            
            if (bottlenecks.length > 0) {
              comment += `### üêõ Performance Bottlenecks (${bottlenecks.length})\n`;
              bottlenecks.slice(0, 5).forEach(bot => {
                comment += `- **${bot.benchmark_name}**: ${bot.bottleneck_type} bottleneck (${bot.performance_impact.toFixed(1)}% impact)\n`;
              });
            }
            
            if (regressions.length === 0 && bottlenecks.length === 0) {
              comment += '‚úÖ No performance issues detected!\n';
            }
            
            comment += `\n---\n*Generated by khive performance monitoring*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
    - name: Fail on performance regression
      if: always()
      run: |
        # Check if any CI reports indicate failure
        for report in performance_results/ci_report_*.json; do
          if [ -f "$report" ]; then
            if grep -q '"status": "FAIL"' "$report"; then
              echo "‚ùå Performance regression detected - failing build"
              cat "$report" | jq '.summary'
              exit 1
            fi
          fi
        done
        echo "‚úÖ No performance regressions detected"